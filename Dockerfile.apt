FROM tomcat:#TOMCAT_BASE#

ARG VERSION
ENV GOSU_VERSION 1.11

RUN set -eux; \
# install GOSU installation dependencies
	apt-get update; \
	apt-get install -y --no-install-recommends ca-certificates wget; \
	if ! command -v gpg; then \
		apt-get install -y --no-install-recommends gnupg2 dirmngr; \
	elif gpg --version | grep -q '^gpg (GnuPG) 1\.'; then \
# "This package provides support for HKPS keyservers." (GnuPG 1.x only)
		apt-get install -y --no-install-recommends gnupg-curl; \
	fi; \
	\
	dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
	wget --retry-connrefused --waitretry=1 -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
	wget --retry-connrefused --waitretry=1 -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
	\
# verify the signature
	export GNUPGHOME="$(mktemp -d)"; \
	gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
	gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
	command -v gpgconf && gpgconf --kill all || :; \
	\
	chmod +x /usr/local/bin/gosu; \
# verify that the binary works
	gosu --version; \
	gosu nobody true; \
	\
# Remove default web apps
    rm -rf /usr/local/tomcat/webapps.dist; \
    \
# Obscuring server info
    cd ${CATALINA_HOME}/lib; \
    mkdir -p org/apache/catalina/util/; \
    jar xf catalina.jar org/apache/catalina/util/ServerInfo.properties; \
    sed -i 's/server.info=.*/server.info=Apache Tomcat/g' org/apache/catalina/util/ServerInfo.properties; \
    jar uf catalina.jar org/apache/catalina/util/ServerInfo.properties; \
    rm -rf org;

# Security enhanced xml files
COPY $VERSION/web.xml ${CATALINA_HOME}/conf/
COPY $VERSION/server.xml ${CATALINA_HOME}/conf/


FROM #JAVA_BASE#

COPY --from=0 /usr/local/bin/gosu /usr/local/bin/gosu
COPY --from=0 /usr/lib/x86_64-linux-gnu/libapr* /usr/lib/x86_64-linux-gnu/
COPY --from=0 /usr/local/tomcat /usr/local/tomcat

ENV CATALINA_HOME /usr/local/tomcat
ENV PATH $CATALINA_HOME/bin:$PATH
WORKDIR $CATALINA_HOME

# let "Tomcat Native" live somewhere isolated
ENV TOMCAT_NATIVE_LIBDIR $CATALINA_HOME/native-jni-lib
ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$TOMCAT_NATIVE_LIBDIR

# Maintenance and verification
RUN set -eux; \
# usual maintenance
	apt-get update; \
	apt-get upgrade -y; \
	rm -rf /var/lib/apt/lists/*; \
	\
# verify that GOSU works
	gosu --version; \
	gosu nobody true; \
	\
# verify Tomcat Native is working properly
	nativeLines="$(catalina.sh configtest 2>&1)"; \
	nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')"; \
	nativeLines="$(echo "$nativeLines" | sort -u)"; \
	if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' >&2; then \
		echo >&2 "$nativeLines"; \
		exit 1; \
	fi

# Tomcat start script
COPY start-tomcat.sh ${CATALINA_HOME}/bin
COPY entrypoint.sh /

# Start container
ENTRYPOINT ["/entrypoint.sh"]
CMD ["start-tomcat.sh"]